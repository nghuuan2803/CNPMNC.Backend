// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Infrastructure.Data;

#nullable disable

namespace WMS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029112357_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cab07f4f-1baa-4317-9149-47af5e8c5b8a",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8a971cbf-d7ee-41e3-a77f-d297820f57db",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4871a311-e7c2-45ac-81fa-107f0d2a9715",
                            Name = "agency",
                            NormalizedName = "AGENCY"
                        },
                        new
                        {
                            Id = "424962f4-963a-45ca-ae2a-b3b59d2043e0",
                            Name = "keeper",
                            NormalizedName = "KEEPER"
                        },
                        new
                        {
                            Id = "79ddcb7b-18b8-458f-8786-585397bcb2f4",
                            Name = "accountant",
                            NormalizedName = "ACCOUNTANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a55364a8-6367-42b6-b2f1-6d4cfa0adef2",
                            RoleId = "cab07f4f-1baa-4317-9149-47af5e8c5b8a"
                        },
                        new
                        {
                            UserId = "34daefcc-2e8e-41b1-8ac7-b2675c73fd82",
                            RoleId = "8a971cbf-d7ee-41e3-a77f-d297820f57db"
                        },
                        new
                        {
                            UserId = "e6ce47a8-5fcd-49a2-8913-f4b0b6e5c354",
                            RoleId = "424962f4-963a-45ca-ae2a-b3b59d2043e0"
                        },
                        new
                        {
                            UserId = "964da110-c58e-4712-8444-78431873c0f2",
                            RoleId = "4871a311-e7c2-45ac-81fa-107f0d2a9715"
                        },
                        new
                        {
                            UserId = "8a780762-d101-4f56-a211-ffea5ee38ba1",
                            RoleId = "79ddcb7b-18b8-458f-8786-585397bcb2f4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Export", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QRcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Exports");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ExportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ExportDetails");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Import", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckPassed")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderBy")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("OrderBy");

                    b.HasIndex("SuplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ImportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImportId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ImportId");

                    b.HasIndex("ProductId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.InventoryCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryChecks");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Merge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("From");

                    b.HasIndex("ProductId");

                    b.HasIndex("To");

                    b.ToTable("Merges");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<double?>("RefundDate")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ExportId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ReturnDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("RefundPrice")
                        .HasColumnType("float");

                    b.Property<int>("ReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnDetails");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Authentication.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Rfid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId")
                        .IsUnique()
                        .HasFilter("[AgencyId] IS NOT NULL");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a55364a8-6367-42b6-b2f1-6d4cfa0adef2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99c5b975-fbd5-43fe-942e-e8824a80a0a9",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(4216),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKws54AQQ7+lJiTBXw7A8NFTyfHVRus8JSgFtPHdE+Of1wwF8OtbdanuPFpVe/F9XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26c2857b-6c43-4958-ab8b-49421ddcc39d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "34daefcc-2e8e-41b1-8ac7-b2675c73fd82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ff4fb48-cac1-4176-b4c3-28aaf8018432",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(4320),
                            Email = "manager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEB8+0TB/Lb/xw0rfEk+W2hVOtT0h/eKoRXG0JAyC94O2lwcFV9gW6Yi4Gn+Rdxp4vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a301944-bffc-419e-ae6b-0a7607c339b9",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = "e6ce47a8-5fcd-49a2-8913-f4b0b6e5c354",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e740c2af-72a2-4f52-81ca-99b0e85aa97a",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(4339),
                            Email = "keeper@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEEPER@GMAIL.COM",
                            NormalizedUserName = "KEEPER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZlj4slvzM3/Qo6eaXvztARdihv9qKiNwayNGWXxo/0YpNy5EGZU1aUQK2toFz0GA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf3e6231-211a-4682-b95d-545aaf928f52",
                            TwoFactorEnabled = false,
                            UserName = "keeper"
                        },
                        new
                        {
                            Id = "964da110-c58e-4712-8444-78431873c0f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32c91b75-63af-4884-9767-afd63081f72c",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(4348),
                            Email = "agency1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AGENCY1@GMAIL.COM",
                            NormalizedUserName = "AGENCY1",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVIvacK9g5j9a6voepFtFjg5O1d93VTDe3cx3Rxcgo4WnaufNRYdsFjIaVLZJ7FyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b888ce72-7991-4756-ac8a-e5eaefda9b06",
                            TwoFactorEnabled = false,
                            UserName = "agency1"
                        },
                        new
                        {
                            Id = "8a780762-d101-4f56-a211-ffea5ee38ba1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd0ce055-951e-4724-9c0a-d67c2faeda91",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(4358),
                            Email = "accountant@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTANT@GMAIL.COM",
                            NormalizedUserName = "ACCOUNTANT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuqUKqOudHoiecgFMBB8Zc/pno8uri9h7q/Yz5hAYrUdP+5Z840v5DdAqpRVdJtqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "371c27a1-a7eb-4702-aa6f-e52116e2e9f0",
                            TwoFactorEnabled = false,
                            UserName = "accountant"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Entities.Locations.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CapacityStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Organization.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("TotalPaid")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Organization.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .IsFixedLength(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("QRcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductGroup.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductGroup.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchId")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("Exported")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("QRcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Batch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImportId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateOnly>("ManufactureDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImportId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Panasonic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sam Sung"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 5,
                            Name = " Xiaomi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tosiba"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Aqua"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Senko"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ti vi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nồi cơm điện"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Máy lọc nước"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tủ lạnh"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Máy giặt"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Điều hòa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Quạt điện"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bếp từ"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Origin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            Id = "vn",
                            Name = "Việt nam"
                        },
                        new
                        {
                            Id = "cn",
                            Name = "Trung Quốc"
                        },
                        new
                        {
                            Id = "us",
                            Name = "Mỹ"
                        },
                        new
                        {
                            Id = "thai",
                            Name = "Thái Lan"
                        },
                        new
                        {
                            Id = "ger",
                            Name = "Đức"
                        },
                        new
                        {
                            Id = "uk",
                            Name = "Anh"
                        },
                        new
                        {
                            Id = "ja",
                            Name = "Nhật"
                        },
                        new
                        {
                            Id = "kor",
                            Name = "Hàn Quốc"
                        },
                        new
                        {
                            Id = "rus",
                            Name = "Nga"
                        },
                        new
                        {
                            Id = "fr",
                            Name = "Pháp"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("ImportPrice")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("QRcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Rfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "SP0001",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1779),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Sony Bravia QLED SQ101",
                            Price = 10000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0002",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1802),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Sony Bravia OLED SN101",
                            Price = 15000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0003",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1804),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Sam Sung QLED SSQ113",
                            Price = 12000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0004",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1806),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Sam Sung OLED SS115",
                            Price = 9000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0005",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1808),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Điều hòa Panasonic PA001",
                            Price = 6000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0006",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1812),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Máy lạnh Tosiba TSO 7",
                            Price = 5000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0007",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1813),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Tủ lạnh LG GG X35",
                            Price = 7000000.0,
                            Quantity = 0,
                            Width = 1.0
                        },
                        new
                        {
                            Id = "SP0008",
                            CreatedOn = new DateTime(2024, 10, 29, 18, 23, 56, 208, DateTimeKind.Local).AddTicks(1815),
                            Deleted = false,
                            Discontinued = false,
                            Height = 1.0,
                            ImportPrice = 0.0,
                            Length = 1.0,
                            Name = "Máy giặt AQUA Model 9",
                            Price = 8000000.0,
                            Quantity = 0,
                            Width = 1.0
                        });
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Supliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Cty TNHH ABC",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 2,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Cty TNHH XYZ",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 3,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Cty CP Đông Tây",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 4,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Cty CP Nam Bắc",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 5,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Tập Đoàn Đa Cấp Xuyên Quốc Gia Cơ Hội",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 6,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Nhà Phân Phối Chính Hãng Xiaomi",
                            PhoneNumber = ""
                        },
                        new
                        {
                            Id = 7,
                            Address = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discontinued = false,
                            Email = "",
                            Name = "Nhà Phân Phối Chính Hãng Cây Sung",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Export", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agency");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ExportDetail", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Activities.Export", "Export")
                        .WithMany("Items")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Export");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Import", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("OrderBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Suplier", "Suplier")
                        .WithMany()
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Suplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ImportDetail", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Activities.Import", "Import")
                        .WithMany("Items")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.InventoryCheck", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Manager");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Merge", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Src")
                        .WithMany()
                        .HasForeignKey("From")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Dest")
                        .WithMany()
                        .HasForeignKey("To")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dest");

                    b.Navigation("Manager");

                    b.Navigation("Product");

                    b.Navigation("Src");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Return", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Activities.Export", "Export")
                        .WithMany()
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agency");

                    b.Navigation("Export");

                    b.Navigation("Manager");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.ReturnDetail", b =>
                {
                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Activities.Return", "Return")
                        .WithMany("Items")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Authentication.User", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Agency", "Agency")
                        .WithOne()
                        .HasForeignKey("WMS.Domain.Entities.Authentication.User", "AgencyId");

                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("WMS.Domain.Entities.Authentication.User", "EmployeeId");

                    b.Navigation("Agency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Locations.Warehouse", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Organization.Employee", "Manager")
                        .WithOne()
                        .HasForeignKey("WMS.Domain.Entities.Locations.Warehouse", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Organization.Employee", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductGroup.Inventory", b =>
                {
                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductGroup.Item", b =>
                {
                    b.HasOne("WMS.Domain.Entities.ProductInfo.Batch", null)
                        .WithMany("Items")
                        .HasForeignKey("BatchId");

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.Locations.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Batch", b =>
                {
                    b.HasOne("WMS.Domain.Entities.Activities.Import", "Import")
                        .WithMany()
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Origin");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Product", b =>
                {
                    b.HasOne("WMS.Domain.Entities.ProductInfo.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("WMS.Domain.Entities.ProductInfo.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Export", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Import", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Activities.Return", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Domain.Entities.Locations.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Batch", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WMS.Domain.Entities.ProductInfo.Product", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
